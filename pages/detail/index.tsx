import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Modal from "react-modal";
import { useRouter } from "next/router";
import { useContext, useEffect, useState } from "react";
import styles from "../../styles/Home.module.css";
import { TodoListContext } from "pages/_app";

const TodoDetail: NextPage = () => {
  const customStyles = {
    content: {
      top: "50%",
      left: "50%",
      right: "auto",
      bottom: "auto",
      marginRight: "-50%",
      transform: "translate(-50%, -50%)",
    },
  };

  const router = useRouter();
  const { index, title } = router.query;
  const { todoList, setTodoList } = useContext(TodoListContext);
  console.log(index);
  console.log(todoList);

  const [text, setText] = useState<string>("");
  const [isUpdateOpen, setIsUpdateOpen] = useState<boolean>(false);
  const [isDeleteOpen, setIsDeleteOpen] = useState<boolean>(false);

  useEffect(() => {
    if (!router.isReady) {
      return;
    }
    setText(title as string);
  }, [router.isReady, title]);
  return (
    <>
      <div className={styles.container}>
        <Head>
          <title>ToDo詳細</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main>
          <h1 className={styles.title}>ToDo詳細</h1>

          <div>
            <input
              type="text"
              placeholder="ToDo"
              value={text}
              onChange={(e) => setText(e.target.value)}
            />
          </div>
          <button
            onClick={() => {
              setIsDeleteOpen(true);
            }}
          >
            削除
          </button>
          <button
            onClick={() => {
              setIsUpdateOpen(true);
            }}
          >
            更新
          </button>

          <div>
            <Link href="/">
              <a href="./">一覧へ戻る</a>
            </Link>
          </div>
        </main>
      </div>

      <Modal isOpen={isUpdateOpen} style={customStyles}>
        <h2>ToDoを更新してもよろしいですか？</h2>
        <button onClick={() => setIsUpdateOpen(false)}>キャンセル</button>
        <button
          onClick={() => {
            setTodoList(
              todoList.map((todo, i) => (i === Number(index) ? text : todo))
            );
            setIsUpdateOpen(false);
          }}
        >
          OK
        </button>
      </Modal>

      <Modal isOpen={isDeleteOpen} style={customStyles}>
        <h2>ToDoを削除してもよろしいですか？</h2>
        <button
          onClick={() => {
            setTodoList(() =>
              todoList.filter(
                (todo, i) => todo !== title || Number(index) !== i
              )
            );
            setText("");
            setIsDeleteOpen(false);
            router.push("/");
          }}
          style={{ color: "red" }}
        >
          削除
        </button>
        <button onClick={() => setIsDeleteOpen(false)}>キャンセル</button>
      </Modal>
    </>
  );
};

export default TodoDetail;
